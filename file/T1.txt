✓ Permitir la creación de funciones, y dentro de ellas, estructuras de control, bloques 
de código y sentencias de código. 

✓ Manejar los tipos de variables enteras, flotantes, "booleanas, caracteres, cadenas de caracteres (string), arreglo estático, y valor nulo." - Jurguenn

✓/X "Los arreglos se permiten de tipo entero o char realizar la creación. Además, se 
permite obtener y modificar sus elementos, y ser utilizados en expresiones." - Keilor

✓ Permitir sentencias para creación de variables, creación y asignación de expresiones
y asignación de expresiones a variables, y algunos casos, sólo expresiones sin asignación.

X "Las expresiones permiten combinar literales, variables y/o funciones, de los tipos reconocidos en la gramática." - Jurguenn

X "Debe permitir operadores y operandos, respetando precedencia (usual matemática) y permitiendo el uso de paréntesis." - Keilor

✓ "Permitir expresiones aritméticas binarias de suma (+), resta (-)," división (/) –entera o decimal según el tipo--, multiplicación (*), módulo (~) y potencia (^). Para enteros o reales." - Jurguenn

✓ "Permitir expresiones aritméticas unarias de negativo(antes del operando), ++, --
(después del operando). Para enteros y el negativo adicionalmente se puede aplicar 
a flotantes" - Keilor/Jurguenn

✓ "Permitir expresiones relacionales (sobre enteros y flotantes) de menor, menor o 
igual, mayor, mayor o igual, igual y diferente. Los operadores igual y diferente 
permiten adicionalmente tipo booleano." - Keilor

✓ "Permitir expresiones lógicas de conjunción, disyunción y negación (ésta puede ser 
tipo función o caracter (! o not))" - Jurguenn

✓ "Debe permitir sentencias de código para las diferentes expresiones mencionadas 
anteriormente y su combinación, el delimitador de final de expresión será el 
carácter gato (#). Además, dichas expresiones pueden usarse en las condicionales y 
bloques de las siguientes estructuras de control." - Keilor

X " Debe permitir el uso de tipos y la combinación de expresiones aritméticas (binarias 
y unarias), relacionales y lógicas, según las reglas gramaticales, aritméticas, 
relacionales y lógicas del Paradigma Imperativo, por ejemplo, tomando como 
referencia el lenguaje C." - Jurguenn

X "Debe permitir las estructuras de control if [-else], while, switch, permitir return y 
break. Las condicionales deberán retornar valores booleanos combinando
expresiones aritméticas, lógicas y relacionales." - Keilor

X "Debe permitir las funciones de leer (enteros y flotantes) y escribir en la salida 
estándar (cadena carácter, enteros y flotantes), se pueden escribir literales o 
variables." - Jurguenn

X "Debe permitir la creación y utilización de funciones, estos deben retornar valores
(entero, reales, char) y recibir parámetros (con tipo)." - Keilor

✓ .Debe definir un único procedimiento inicial main, por medio de la cual se inicia la 
ejecución de los programas.

✓ "Además, debe permitir comentarios de una línea (//) o múltiples líneas (/* */)." - Jurguenn

✓ "Toda gramática libre de contexto BNF debe tener un símbolo inicial, que a partir de 
ella se generan todas las producciones." Consulta